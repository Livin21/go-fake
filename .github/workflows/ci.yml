name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.24']
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Install dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.txt
        flags: unittests
        name: codecov-go-fake

    - name: Build
      run: go build -v ./cmd/generate

    - name: Test CLI functionality
      run: |
        # Build the binary
        go build -o go-fake-test ./cmd/generate
        
        # Test version command
        ./go-fake-test --version
        
        # Test help command
        ./go-fake-test --help
        
        # Test with sample files (if they exist)
        if [ -f "examples/sample.json" ]; then
          ./go-fake-test -schema examples/sample.json -rows 2 -output test_output.json
          [ -f "test_output.json" ] && echo "✓ JSON output test passed"
        fi

    - name: Run format override tests
      run: |
        if [ -f "examples/sample.json" ]; then
          # Test JSON to CSV conversion
          ./go-fake-test -schema examples/sample.json -format csv -rows 2 -output test.csv
          [ -f "test.csv" ] && echo "✓ JSON to CSV conversion test passed"
        fi

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'
