name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Get version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Update version in main.go
      run: |
        sed -i 's/const version = ".*"/const version = "${{ steps.version.outputs.VERSION }}"/' cmd/generate/main.go

    - name: Run tests
      run: go test ./...

    - name: Build for multiple platforms
      run: |
        # Linux AMD64
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o build/go-fake-linux-amd64 cmd/generate/main.go
        
        # Linux ARM64
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o build/go-fake-linux-arm64 cmd/generate/main.go
        
        # Windows AMD64
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o build/go-fake-windows-amd64.exe cmd/generate/main.go
        
        # Windows ARM64
        GOOS=windows GOARCH=arm64 go build -ldflags="-s -w" -o build/go-fake-windows-arm64.exe cmd/generate/main.go
        
        # macOS AMD64
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o build/go-fake-darwin-amd64 cmd/generate/main.go
        
        # macOS ARM64 (Apple Silicon)
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o build/go-fake-darwin-arm64 cmd/generate/main.go

    - name: Create checksums
      run: |
        cd build
        sha256sum * > checksums.txt
        cat checksums.txt

    - name: Create release notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        ## 🚀 go-fake ${{ steps.version.outputs.VERSION }}
        
        ### Features in this release:
        - 🤖 **AI-Enhanced Field Inference** with OpenAI integration
        - 🧠 **Intelligent Pattern Matching** for 40+ data types
        - 🔄 **Format Override** - Convert between JSON and CSV regardless of input schema
        - 🔗 **Relationship Constraints** with foreign key support
        - 📁 **Directory-based Output** for multi-table schemas
        - ⚡ **High Performance** fake data generation
        
        ### Download Instructions:
        
        **Linux:**
        ```bash
        # AMD64
        wget https://github.com/Livin21/go-fake/releases/download/${{ steps.version.outputs.VERSION }}/go-fake-linux-amd64
        chmod +x go-fake-linux-amd64
        sudo mv go-fake-linux-amd64 /usr/local/bin/go-fake
        
        # ARM64
        wget https://github.com/Livin21/go-fake/releases/download/${{ steps.version.outputs.VERSION }}/go-fake-linux-arm64
        chmod +x go-fake-linux-arm64
        sudo mv go-fake-linux-arm64 /usr/local/bin/go-fake
        ```
        
        **macOS:**
        ```bash
        # Intel Macs
        wget https://github.com/Livin21/go-fake/releases/download/${{ steps.version.outputs.VERSION }}/go-fake-darwin-amd64
        chmod +x go-fake-darwin-amd64
        sudo mv go-fake-darwin-amd64 /usr/local/bin/go-fake
        
        # Apple Silicon Macs
        wget https://github.com/Livin21/go-fake/releases/download/${{ steps.version.outputs.VERSION }}/go-fake-darwin-arm64
        chmod +x go-fake-darwin-arm64
        sudo mv go-fake-darwin-arm64 /usr/local/bin/go-fake
        ```
        
        **Windows:**
        Download the appropriate `.exe` file for your architecture and add it to your PATH.
        
        ### Quick Start:
        ```bash
        # Check version
        go-fake --version
        
        # Generate sample data
        go-fake -schema examples/sample.json -rows 100 -output data.json
        
        # Use AI enhancement (requires OPENAI_API_KEY)
        export OPENAI_API_KEY="your-key"
        go-fake -schema schema.json -ai -output enhanced_data.json
        
        # Override output format
        go-fake -schema schema.sql -format json -output data.json
        ```
        
        ### Verify Downloads:
        All binaries are signed and checksums are provided in `checksums.txt`. Verify your download:
        ```bash
        sha256sum go-fake-* && cat checksums.txt
        ```
        EOF

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.version.outputs.VERSION }}
        name: "go-fake ${{ steps.version.outputs.VERSION }}"
        bodyFile: release_notes.md
        draft: false
        prerelease: false
        artifacts: |
          build/go-fake-linux-amd64
          build/go-fake-linux-arm64
          build/go-fake-windows-amd64.exe
          build/go-fake-windows-arm64.exe
          build/go-fake-darwin-amd64
          build/go-fake-darwin-arm64
          build/checksums.txt
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload to Go module proxy
      run: |
        echo "Release ${{ steps.version.outputs.VERSION }} completed successfully!"
        echo "Binaries available for:"
        echo "  - Linux (AMD64, ARM64)"
        echo "  - Windows (AMD64, ARM64)" 
        echo "  - macOS (Intel, Apple Silicon)"
        echo "Go module will be automatically available at:"
        echo "  go install github.com/Livin21/go-fake/cmd/generate@${{ steps.version.outputs.VERSION }}"
